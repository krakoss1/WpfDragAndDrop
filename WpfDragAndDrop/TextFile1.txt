using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace WpfDragAndDrop
{
    /// <summary>
    /// Логика взаимодействия для MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            // Turn on border
            //CanvasBorder.BorderThickness = new Thickness(1);

            // Turn off border
            //CanvasBorder.BorderThickness = new Thickness(0);


            //Image Img = new Image();
            //BitmapImage BitImg = new BitmapImage(new Uri(
            //    "/WpfDragAndDrop;component/Images/image1.jpg", UriKind.Relative));
            //Img.Source = BitImg;
            //Img.Width = 200;
            //Img.Height = 200;
            //_ = canvasImages.Children.Add(Img);

            BitmapImage BitImg = new BitmapImage(new Uri(
               "/WpfDragAndDrop;component/Images/image1.jpg", UriKind.Relative));
            myImg.Source = BitImg;
            myImg.Width = 200;
            myImg.Height = 200;

        }

        private void CanvasImages_PreviewMouseMove(object sender, MouseEventArgs e)
        {
           
        }

        private void CanvasImages_PreviewMouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            //BitmapImage BitImg;
            //if (myImg.Source.ToString().Contains("image1"))
            //{
            //    /*
            //    canvasImages.Children.RemoveAt(0);
            //    Image Img = new Image();
            //    BitmapImage BitImg = new BitmapImage(new Uri(
            //        "/WpfDragAndDrop;component/Images/colodez.jpg", UriKind.Relative));
            //    Img.Source = BitImg;
            //    Img.Width = 200;
            //    Img.Height = 200;
            //    _ = canvasImages.Children.Add(Img);
            //    */
            //    BitImg = new BitmapImage(new Uri(
            //   "/WpfDragAndDrop;component/Images/colodez.jpg", UriKind.Relative));

            //}
            //else
            //{
            //    BitImg = new BitmapImage(new Uri(
            //   "/WpfDragAndDrop;component/Images/image1.jpg", UriKind.Relative));
            //}
            //myImg.Source = BitImg;
           
            if (!myImg.Source.ToString().Contains("image1"))
            {
                myImg.Source = new BitmapImage(new Uri(@"/Images/image1.jpg", UriKind.Relative));
            }
            else
            {
                myImg.Source = new BitmapImage(new Uri(@"/Images/colodez.jpg", UriKind.Relative));
            }
            
            myImg.Width = 200;
            myImg.Height = 200;

        }
    }
}
***************************************************************************************************
<Window x:Class="WpfDragAndDrop.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfDragAndDrop"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Border x:Name="canvasBorder" BorderThickness="5" BorderBrush="Red" CornerRadius="2" HorizontalAlignment="Left" VerticalAlignment="Top" Width="580" Height="345" Margin="84,47,0,0">
        <Canvas x:Name="canvasImages" 
                Background="Transparent" 
                HorizontalAlignment="Left" 
                Height="325" 
                Margin="5,5,0,0" 
                VerticalAlignment="Top" 
                Width="560"
                AllowDrop="True"
                PreviewMouseLeftButtonUp="CanvasImages_PreviewMouseLeftButtonUp"
                PreviewMouseMove="CanvasImages_PreviewMouseMove">
            <Image x:Name="myImg" />
        </Canvas>
    </Border>
</Window>
************************************************************
************************************************************
************************************************************
<Window x:Class="WpfDragAndDrop.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfDragAndDrop"
        mc:Ignorable="d"
        Title="MainWindow" Height="500" Width="800">
    <StackPanel>
        <Image PreviewMouseDown="Image_PreviewMouseDown" Height="100" Source="/WpfDragAndDrop;component/Images/colodez.jpg"/>
        <Border x:Name="canvasBorder" BorderThickness="5" BorderBrush="Red" CornerRadius="2" HorizontalAlignment="Left" VerticalAlignment="Top" Width="580" Height="300" Margin="84,47,0,0">
            <Canvas Width="576" Height="296" Background="Transparent" AllowDrop="True" Drop="Canvas_Drop"/>
        </Border>
    </StackPanel>
</Window>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace WpfDragAndDrop
{
    /// <summary>
    /// Логика взаимодействия для MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            
        }
        private void Image_PreviewMouseDown(object sender, MouseButtonEventArgs e)
        {
            DragDrop.DoDragDrop((DependencyObject)sender, ((Image)sender).Source, DragDropEffects.Copy);
        }

        private void Canvas_Drop(object sender, DragEventArgs e)
        {
            if(e.Data.GetDataPresent(DataFormats.FileDrop))
            {

            }

            foreach (var format in e.Data.GetFormats())
            {
                ImageSource imageSource = e.Data.GetData(format) as ImageSource;
                if (imageSource != null)
                {
                    Image img = new Image();
                    img.Height = 100;
                    img.Source = imageSource;
                    ((Canvas)sender).Children.Add(img);
                }
            }
        }

    }
}
